#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# MANAGE SCRIPT FAILURE
#=================================================

ynh_clean_setup () {
	### Remove this function if there's nothing to clean before calling the remove script.
	true
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# RETRIEVE ARGUMENTS FROM THE MANIFEST
#=================================================

# Retrieve arguments
domain=$YNH_APP_ARG_DOMAIN
path_url=$YNH_APP_ARG_PATH
is_public=$YNH_APP_ARG_IS_PUBLIC

### If it's a multi-instance app, meaning it can be installed several times independently
### The id of the app as stated in the manifest is available as $YNH_APP_ID
### The instance number is available as $YNH_APP_INSTANCE_NUMBER (equals "1", "2", ...)
### The app instance name is available as $YNH_APP_INSTANCE_NAME
###    - the first time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample
###    - the second time the app is installed, YNH_APP_INSTANCE_NAME = ynhexample__2
###    - ynhexample__{N} for the subsequent installations, with N=3,4, ...
### The app instance name is probably what interests you most, since this is
### guaranteed to be unique. This is a good unique identifier to define installation path,
### db names, ...
app=$YNH_APP_INSTANCE_NAME

#=================================================
# CHECK IF THE APP CAN BE INSTALLED WITH THESE ARGS
#=================================================

### If the app uses nginx as web server (written in HTML/PHP in most cases), the final path should be "/var/www/$app".
### If the app provides an internal web server (or uses another application server such as uwsgi), the final path should be "/opt/yunohost/$app"
final_path=/var/www/$app
test ! -e "$final_path" || ynh_die "This path already contains a folder"

# Normalize the url path syntax
path_url=$(ynh_normalize_url_path $path_url)

# Check web path availability
ynh_webpath_available $domain $path_url
# Register (book) web path
ynh_webpath_register $app $domain $path_url

#=================================================
# STORE SETTINGS FROM MANIFEST
#=================================================

ynh_app_setting_set $app domain $domain
ynh_app_setting_set $app path $path_url
ynh_app_setting_set $app is_public $is_public

#=================================================
# FIND AND OPEN A PORT
#=================================================

### Use these lines if you have to open a port for the application
### `ynh_find_port` will find the first available port starting from the given port.
### If you're not using these lines:
###		- Remove the section "CLOSE A PORT" in the remove script

# Find a free port
port=$(ynh_find_port 8096)
# Open this port
yunohost firewall allow --no-upnp TCP $port 2>&1
ynh_app_setting_set $app port $port

#==============================================
# INSTALL DEPS
#==============================================

ynh_package_install openssl curl mysql-client mysql-server php-fpm php-cli php-curl php-mysql

# Install Other Dependencies
echo "Installing some dependencies"
if [ $OS_INSTALL_CMD == 'apt' ]; then
    if [ $(lsb_release -sc) == 'jessie' ]; then
        sudo echo "deb http://http.debian.net/debian jessie-backports main" > /etc/apt/sources.list.d/backports.list
        dpkg --add-architecture i386
        apt-get update
        apt-get install -y -t jessie-backports openjdk-8-jdk-headless
        apt-get install -y openssl curl git tar lib32gcc1 lib32tinfo5 lib32z1 lib32stdc++6 libcurl3-gnutls:i386
    elif [ $(lsb_release -sc) == 'trusty' ]; then
        sudo add-apt-repository -y ppa:openjdk-r/ppa
        dpkg --add-architecture i386
        apt-get update
        apt-get install -y openssl curl git openjdk-8-jdk-headless tar lib32gcc1 lib32tinfo5 lib32z1 lib32stdc++6 libcurl3-gnutls:i386
    else
        dpkg --add-architecture i386
        apt-get update
        apt-get install -y openssl curl git openjdk-8-jdk-headless tar lib32gcc1 lib32tinfo5 lib32z1 lib32stdc++6 libcurl3-gnutls:i386
    fi
    curl -s https://packagecloud.io/install/repositories/pufferpanel/${pufferdRepo}/script.deb.sh | bash
elif [ $OS_INSTALL_CMD == 'yum' ]; then
    yum -y install openssl curl git java-1.8.0-openjdk-devel tar glibc.i686 libstdc++.i686 libcurl.i686
    curl -s https://packagecloud.io/install/repositories/pufferpanel/${pufferdRepo}/script.rpm.sh | bash
elif [ $OS_INSTALL_CMD == 'pacman' ]; then
    grep -e "^\[multilib\]$" /etc/pacman.conf &> /dev/null
    if [ $? -eq 0 ]; then
        pacman -S openssl curl git jdk8-openjdk tar lib32-glibc lib32-gcc-libs --noconfirm --needed
    else
        echo -e "Please enable [multilib] in /etc/pacman.conf for lib32 libraries"
    fi
fi


#Adding repo of pufferd
#curl -s https://packagecloud.io/install/repositories/pufferpanel/pufferd/script.deb.sh

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_app_setting_set $app final_path $final_path
# Download, check integrity, uncompress and patch the source from app.src
ynh_setup_source "$final_path"

#==============================================
# INSTALL PufferPanel
#==============================================

#Install Panel
#mv $final_path/


#Install Daemon
mkdir -p /var/lib/pufferd /var/log/pufferd /etc/pufferd
wget https://packagecloud.io/pufferpanel/pufferd/packages/debian/stretch/pufferd_1.2.5_amd64.deb/download.deb
dpkg --install download.deb

echo -e "Installing pufferd using package manager"
pufferdLocation="/srv/pufferd"
installed=0
if [ $OS_INSTALL_CMD == 'apt' ]; then
    apt-get update
    apt-get install pufferd
    pufferdLocation="/usr/sbin/"
elif [ $OS_INSTALL_CMD == 'yum' ]; then
    yum install -y pufferd
    pufferdLocation="/usr/sbin/"
fi

if [ -f "${pufferdLocation}/pufferd" ]; then
    echo "Detected installation via package successful"
else
    echo -e "Failed to install using package manager, manually installing"
    echo -e "Downloading pufferd from $downloadUrl"
    pufferdLocation="/srv/pufferd/"
    mkdir -p /srv/pufferd
    curl -L -o /srv/pufferd/pufferd $downloadUrl
    checkResponseCode
    chmod +x /srv/pufferd/pufferd
    checkResponseCode
    writeServiceFile
    checkResponseCode
    useradd --system --home /var/lib/pufferd --user-group pufferd
fi

if type systemctl &> /dev/null; then
    echo "Stopping service to prepare for installation"
    systemctl stop pufferd
elif type service &> /dev/null; then
    echo "Stopping service to prepare for installation"
    service pufferd stop
fi

if [ -f "${pufferdLocation}/pufferd" ]; then
    echo "Detected installation via package successful"
else
    echo -e "Failed to install using package manager, manually installing"
    echo -e "Downloading pufferd from $downloadUrl"
    pufferdLocation="/srv/pufferd/"
    mkdir -p /srv/pufferd
    curl -L -o /srv/pufferd/pufferd $downloadUrl
    checkResponseCode
    chmod +x /srv/pufferd/pufferd
    checkResponseCode
    writeServiceFile
    checkResponseCode
    useradd --system --home /var/lib/pufferd --user-group pufferd
fi

if type systemctl &> /dev/null; then
    echo "Stopping service to prepare for installation"
    systemctl stop pufferd
elif type service &> /dev/null; then
    echo "Stopping service to prepare for installation"
    service pufferd stop
fi

cd $pufferdLocation
echo -e "Executing pufferd installation"
./pufferd --install --auth http://yuno2.probetech.be --token 64F263CF-F18C-4C11-A118-81E2435B2A86 --config /etc/pufferd/config.json
checkResponseCode

chown -R pufferd:pufferd /var/lib/pufferd /etc/pufferd /var/log/pufferd
if [ -f /srv/pufferd ]; then
  chown -R pufferd:pufferd /srv/pufferd
fi

if type systemctl &> /dev/null; then
    echo "Starting pufferd service"
    systemctl start pufferd
    systemctl enable pufferd
elif type service &> /dev/null; then
    echo "Starting pufferd service"
    service pufferd start
fi

echo "Successfully installed the daemon"


#=================================================
# NGINX CONFIGURATION
#=================================================

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a system user
ynh_system_user_create $app

#=================================================
# MODIFY A CONFIG FILE
#=================================================
#cp -a ../conf/onlyoffice-documentserver.conf /etc/onlyoffice/documentserver/nginx/onlyoffice-documentserver.conf
#ynh_replace_string "__NEXTCLOUDDOMAIN__" "$nextcloud_domain" "/etc/loolwsd/loolwsd.xml"
#ynh_replace_string "__PASSWORD__" "$password" "/etc/loolwsd/loolwsd.xml"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================

### `ynh_store_file_checksum` is used to store the checksum of a file.
### That way, during the upgrade script, by using `ynh_backup_if_checksum_is_different`,
### you can make a backup of this file before modifying it again if the admin had modified it.

# Calculate and store the config file checksum into the app settings
#ynh_store_file_checksum "/etc/onlyoffice/documentserver/nginx/onlyoffice-documentserver.conf"


#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

### For security reason, any app should set the permissions to root: before anything else.
### Then, if write authorization is needed, any access should be given only to directories
### that really need such authorization.

# Set permissions to app files
#chown -R root: /etc/loolwsd


#=================================================
# SETUP SSOWAT
#=================================================

# If app is public, add url to SSOWat conf as skipped_uris
if [ $is_public -eq 1 ]; then
  # unprotected_uris allows SSO credentials to be passed anyway.
  ynh_app_setting_set "$app" unprotected_uris "/"
fi

# Reload services
systemctl reload nginx
